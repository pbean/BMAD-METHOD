# GitHub Actions workflow for Unity Profiler API automation framework
# Part of BMAD Unity expansion pack Priority 3 implementation
# Integrates with Unity Test Framework for automated performance validation

name: Unity Performance Testing
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly performance tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2022.3.10f1 # LTS version recommended

jobs:
  performance-validation:
    name: Unity Performance Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [StandaloneWindows64, Android, iOS, WebGL]
        test-scene: [MainMenu, GameplayLevel1, BossLevel]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Needed for git commit hash

    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: Library
        key: Library-${{ matrix.platform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.platform }}-
          Library-

    - name: Setup Unity
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: ${{ matrix.platform }}

    - name: Run Unity Performance Tests
      uses: game-ci/unity-test-runner@v2
      id: performance-tests
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        testMode: PlayMode
        customParameters: |
          -quit
          -batchmode
          -nographics
          -executeMethod BMAD.Unity.ProfilerAutomation.UnityProfilerIntegrationManager.RunCIPerformanceTests
          -testScene ${{ matrix.test-scene }}
          -targetPlatform ${{ matrix.platform }}
          -performanceReportPath "performance-results/"

    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results-${{ matrix.platform }}-${{ matrix.test-scene }}
        path: |
          performance-results/
          Logs/
          
    - name: Parse Performance Results
      id: parse-results
      run: |
        # Parse performance test results and set outputs
        if [ -f "performance-results/performance-report.json" ]; then
          echo "PERFORMANCE_PASSED=$(jq -r '.withinThresholds' performance-results/performance-report.json)" >> $GITHUB_OUTPUT
          echo "AVERAGE_FPS=$(jq -r '.averageFPS' performance-results/performance-report.json)" >> $GITHUB_OUTPUT
          echo "MEMORY_USAGE=$(jq -r '.totalMemoryUsed' performance-results/performance-report.json)" >> $GITHUB_OUTPUT
        else
          echo "PERFORMANCE_PASSED=false" >> $GITHUB_OUTPUT
          echo "Performance results file not found"
        fi

    - name: Comment PR with Performance Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'performance-results/performance-report.json';
          
          if (!fs.existsSync(path)) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ Performance Test Failed
              
              Performance test results not found for ${{ matrix.platform }} - ${{ matrix.test-scene }}
              
              Please check the logs for more details.`
            });
            return;
          }
          
          const results = JSON.parse(fs.readFileSync(path, 'utf8'));
          const status = results.withinThresholds ? '✅ PASSED' : '❌ FAILED';
          const violations = results.thresholdViolations || [];
          
          let body = `## Performance Test Results - ${{ matrix.platform }}
          
          **Scene**: ${{ matrix.test-scene }}
          **Status**: ${status}
          **Platform**: ${{ matrix.platform }}
          
          ### Metrics
          | Metric | Value | Unit |
          |--------|-------|------|
          | Average FPS | ${results.averageFPS?.toFixed(1) || 'N/A'} | fps |
          | Frame Time | ${results.averageFrameTime?.toFixed(2) || 'N/A'} | ms |
          | Memory Usage | ${results.totalMemoryUsed ? Math.round(results.totalMemoryUsed / (1024 * 1024)) : 'N/A'} | MB |
          | Draw Calls | ${results.drawCallsCount || 'N/A'} | count |
          `;
          
          if (violations.length > 0) {
            body += `\n### ⚠️ Threshold Violations\n`;
            violations.forEach(violation => {
              body += `- ${violation}\n`;
            });
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Fail Build on Performance Regression
      if: steps.parse-results.outputs.PERFORMANCE_PASSED == 'false'
      run: |
        echo "Performance tests failed - check artifacts for details"
        exit 1

  performance-regression-check:
    name: Performance Regression Analysis
    runs-on: ubuntu-latest
    needs: performance-validation
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download Performance Results
      uses: actions/download-artifact@v3
      with:
        path: all-performance-results/

    - name: Setup Unity for Regression Analysis
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: StandaloneWindows64

    - name: Run Regression Analysis
      run: |
        # Consolidate all performance results
        mkdir -p consolidated-results
        find all-performance-results/ -name "performance-report.json" -exec cp {} consolidated-results/ \;
        
        # Run Unity method for regression analysis
        unity-editor \
          -quit \
          -batchmode \
          -nographics \
          -executeMethod BMAD.Unity.ProfilerAutomation.UnityProfilerIntegrationManager.AnalyzePerformanceRegression \
          -resultsPath "consolidated-results/"

    - name: Generate Performance Trend Report
      run: |
        # Create performance trend analysis
        echo "# Performance Trend Report" > performance-trend.md
        echo "**Date**: $(date)" >> performance-trend.md
        echo "**Commit**: $GITHUB_SHA" >> performance-trend.md
        echo "" >> performance-trend.md
        
        # Add trend analysis data
        if [ -f "performance-trend-data.json" ]; then
          cat performance-trend-data.json >> performance-trend.md
        fi

    - name: Upload Trend Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-trend-report
        path: performance-trend.md

  performance-benchmarking:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Unity
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: StandaloneWindows64

    - name: Run Comprehensive Performance Benchmark
      run: |
        unity-editor \
          -quit \
          -batchmode \
          -nographics \
          -executeMethod BMAD.Unity.ProfilerAutomation.UnityProfilerIntegrationManager.RunComprehensiveBenchmark \
          -benchmarkDuration 300 \
          -outputPath "benchmark-results/"

    - name: Archive Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark-${{ github.sha }}
        path: benchmark-results/
        retention-days: 30

    - name: Update Performance Dashboard
      if: success()
      run: |
        # Update performance dashboard with latest results
        # This could integrate with external dashboard services
        curl -X POST "${{ secrets.PERFORMANCE_DASHBOARD_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d "@benchmark-results/benchmark-summary.json"

  mobile-performance-testing:
    name: Mobile Performance Testing
    runs-on: macos-latest
    if: contains(github.event.head_commit.message, '[mobile-test]') || github.event_name == 'schedule'
    
    strategy:
      matrix:
        platform: [iOS, Android]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Unity
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: ${{ matrix.platform }}

    - name: Build Mobile Test Application
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: ${{ env.UNITY_VERSION }}
        targetPlatform: ${{ matrix.platform }}
        customParameters: |
          -quit
          -batchmode
          -executeMethod BMAD.Unity.ProfilerAutomation.UnityProfilerIntegrationManager.BuildPerformanceTestApp

    - name: Setup iOS Simulator (iOS only)
      if: matrix.platform == 'iOS'
      run: |
        xcrun simctl create "iPhone 14" com.apple.CoreSimulator.SimDeviceType.iPhone-14
        xcrun simctl boot "iPhone 14"

    - name: Setup Android Emulator (Android only)
      if: matrix.platform == 'Android'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: google_apis
        arch: x86_64
        script: echo "Android emulator started"

    - name: Run Mobile Performance Tests
      run: |
        # Deploy and run performance tests on mobile platform
        unity-editor \
          -quit \
          -batchmode \
          -executeMethod BMAD.Unity.ProfilerAutomation.UnityProfilerIntegrationManager.RunMobilePerformanceTests \
          -platform ${{ matrix.platform }}

    - name: Collect Mobile Performance Data
      uses: actions/upload-artifact@v3
      with:
        name: mobile-performance-${{ matrix.platform }}
        path: mobile-performance-results/
