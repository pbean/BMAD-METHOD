template:
  id: unity-asset-integration-template-v2
  name: Unity Asset Store Integration Document  
  version: 2.0
  output:
    format: markdown
    filename: docs/unity-asset-integration.md
    title: "{{project_name}} Unity Asset Store Integration"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: introduction
    title: Unity Asset Store Integration Overview
    instruction: |
      [[LLM: Project Context Analysis]]
      Before beginning asset integration planning, analyze the project context to provide intelligent recommendations:
      
      1. **Project Dimension Detection:**
         - Review GDD and architecture documents to determine 2D/3D/2.5D project type
         - Identify rendering pipeline (Built-in, URP, HDRP) from foundation architecture
         - Note target platforms and performance requirements
      
      2. **Unity Version Analysis:**
         - Extract Unity version from architecture foundation document
         - Check asset compatibility requirements for the specific Unity version
         - Note any LTS vs Tech Stream implications for asset selection
      
      3. **Team and Timeline Context:**
         - Assess team technical expertise level for asset integration complexity
         - Consider project timeline constraints affecting build-vs-buy decisions
         - Evaluate maintenance bandwidth for asset management
      
      Generate an intelligent introduction that adapts to the detected project characteristics.
    content: |
      This document defines the Unity Asset Store integration strategy for {{project_name}}. It provides an intelligent, adaptive framework for third-party asset evaluation, integration, and lifecycle management optimized for {{project_type}} development.

      All asset integrations undergo comprehensive compatibility analysis, security assessment, performance profiling, and license compliance validation to ensure optimal project outcomes with minimal risk.

  - id: project-analysis
    title: Project Asset Requirements Analysis
    instruction: |
      [[LLM: Intelligent Asset Requirements Detection]]
      Perform comprehensive project analysis to identify asset integration opportunities:
      
      1. **GDD Feature Gap Analysis:**
         - Parse GDD for features that would benefit from third-party assets
         - Identify complex systems where mature solutions exist (dialogue, inventory, etc.)
         - Detect specialized needs (shaders, effects, tools) mentioned in design documents
      
      2. **Development Acceleration Opportunities:**
         - Analyze project timeline against feature complexity
         - Identify areas where assets could provide 80/20 value proposition
         - Consider team expertise gaps that assets could fill
      
      3. **Platform-Specific Asset Needs:**
         - Mobile projects: Performance optimization assets, mobile-specific UI
         - Console projects: Platform SDK integrations, certification helpers
         - VR/AR projects: Specialized input systems, optimization tools
         - PC projects: Advanced graphics assets, modding framework support
      
      4. **Technical Debt Prevention:**
         - Identify areas where poor custom implementation could create future maintenance burden
         - Consider asset licensing that aligns with project commercial goals
      
      Generate intelligent asset requirements based on project characteristics analysis.
    elicit: true
    sections:
      - id: requirements-matrix
        title: Asset Requirements Matrix
        type: table
        columns: [Feature Area, Priority, Build/Buy Recommendation, Technical Rationale, Budget Range, Risk Assessment]
        instruction: |
          [[LLM: Build vs Buy Intelligence]]
          For each identified requirement, apply intelligent decision logic:
          
          **Build Recommendation Criteria:**
          - Simple implementation (< 1 week development)
          - Unique requirements not met by existing assets
          - Core competitive differentiator for the game
          - Team has specific expertise in the area
          
          **Buy Recommendation Criteria:**
          - Complex system with proven solutions available
          - Non-core functionality that would distract from main development
          - Mature ecosystem with good community support
          - Time-to-market pressure outweighs custom development benefits
          
          Include risk assessment considering vendor lock-in, maintenance burden, and compatibility.
        examples:
          - "| Dialogue System | High | Buy | Complex branching logic, mature solutions available | $75-200 | Low - Multiple vendors, good Unity integration |"
          - "| Mobile Performance Optimization | Medium | Buy | Specialized mobile profiling needed | $50-150 | Medium - Platform-specific, requires updates |"
          - "| Custom Player Controls | High | Build | Core gameplay differentiator, unique feel required | Dev Time | Low - Full control, no dependencies |"

  - id: asset-compatibility-analysis
    title: Asset Compatibility & Security Assessment
    instruction: |
      [[LLM: Asset Compatibility Intelligence]]
      Perform comprehensive compatibility and security analysis for asset integration:
      
      1. **Unity Version Compatibility:**
         - Validate asset compatibility with project Unity version from foundation architecture
         - Check for deprecated API usage that could cause future issues
         - Assess upgrade path compatibility with planned Unity version migrations
      
      2. **Platform Compatibility Analysis:**
         - Verify asset support for all target platforms from tech stack
         - Check for platform-specific limitations or optimizations
         - Assess mobile performance implications and memory usage
      
      3. **Dependency Chain Analysis:**
         - Map asset dependencies and potential conflicts
         - Check for circular dependencies or version conflicts
         - Assess impact on build size and loading performance
      
      4. **Security Assessment Framework:**
         - Evaluate asset source code access and review history
         - Check for network access, file system access, or permission requirements
         - Assess vendor security practices and incident history
         - Consider data privacy implications for user data handling
      
      Generate intelligent compatibility recommendations with risk mitigation strategies.
    elicit: true
    sections:
      - id: compatibility-matrix
        title: Compatibility Assessment Matrix
        type: table
        columns: [Asset Name, Unity Version, Platform Support, Dependencies, Security Rating, Compatibility Score]
        instruction: |
          [[LLM: Compatibility Scoring Intelligence]]
          Rate each asset on a 1-10 compatibility scale considering:
          - Unity version alignment (3 points)
          - Platform support completeness (2 points)
          - Dependency cleanliness (2 points)  
          - Security assessment (2 points)
          - Community/vendor support (1 point)
          
          Provide specific recommendations for scores below 7.
        examples:
          - "| ProBuilder | 2022.3 LTS Compatible | All Desktop/Mobile | Unity Mathematics | 9/10 | 9 - Excellent Unity integration, official support |"
          - "| Third Party Analytics | 2021.3+ | Mobile Only | Native SDKs | 6/10 | 7 - Limited platform support, requires careful data handling |"

  - id: selected-assets
    title: Selected Unity Assets
    instruction: |
      [[LLM: Asset Integration Planning Intelligence]]
      For each selected asset, provide comprehensive integration planning:
      
      1. **Integration Complexity Assessment:**
         - Evaluate API integration complexity and learning curve
         - Assess customization and extension requirements
         - Plan for wrapper/adapter layer development
      
      2. **Performance Impact Prediction:**
         - Estimate memory footprint and runtime performance impact
         - Plan profiling approach and optimization strategies
         - Consider mobile battery life implications
      
      3. **Maintenance Planning:**
         - Assess vendor update frequency and quality
         - Plan for version migration and compatibility testing
         - Consider long-term support and community health
      
      Generate detailed integration plans with fallback strategies for each asset.
    elicit: true
    repeatable: true
    sections:
      - id: asset-entry
        title: "{{asset_name}}"
        template: |
          **Asset Details:**
          - **Publisher:** {{publisher_name}}
          - **Version:** {{asset_version}}
          - **Unity Compatibility:** {{unity_compatibility}}
          - **License Type:** {{license_type}}
          - **Cost:** {{asset_cost}}
          - **Security Rating:** {{security_rating}}/10

          **Purpose & Integration Rationale:**
          {{asset_purpose}}

          **[[LLM: Performance Impact Analysis]]**
          **Performance Metrics:**
          - **Estimated Memory Impact:** {{memory_impact}}
          - **Runtime Performance Cost:** {{performance_cost}}
          - **Build Size Impact:** {{build_size_impact}}
          - **Mobile Battery Impact:** {{battery_impact}}

          **Key Features Utilized:**
          - {{feature_1}}
          - {{feature_2}}
          - {{feature_3}}

          **Integration Strategy:**
          - **Wrapper Pattern:** {{wrapper_approach}}
          - **API Abstraction:** {{abstraction_strategy}}
          - **Customization Plan:** {{customization_approach}}

          **Dependencies & Conflicts:**
          - {{dependency_1}}
          - {{potential_conflict_1}}

          **[[LLM: Risk Assessment & Mitigation]]**
          **Risk Analysis:**
          - **Vendor Lock-in Risk:** {{vendor_risk}} - Mitigation: {{vendor_mitigation}}
          - **Compatibility Risk:** {{compatibility_risk}} - Mitigation: {{compatibility_mitigation}}
          - **Performance Risk:** {{performance_risk}} - Mitigation: {{performance_mitigation}}

          **Fallback Strategy:**
          {{fallback_plan}}

          **Update Management:**
          - **Update Schedule:** {{update_schedule}}
          - **Testing Protocol:** {{testing_protocol}}
          - **Rollback Strategy:** {{rollback_strategy}}

  - id: integration-architecture
    title: Asset Integration Architecture
    instruction: |
      [[LLM: Unity Integration Patterns Intelligence]]
      Design Unity-specific integration patterns optimized for the project architecture:
      
      1. **Project Type Optimization:**
         - 2D Projects: Focus on sprite-based asset integration, 2D physics compatibility
         - 3D Projects: Emphasize 3D rendering pipeline integration, complex scene management
         - Mobile Projects: Prioritize performance wrappers, memory management patterns
         - Desktop Projects: Enable advanced features, development productivity integration
      
      2. **Unity Architecture Alignment:**
         - Align with component-based architecture from foundation document
         - Integrate with ScriptableObject data patterns
         - Leverage Unity Events vs C# Events decisions from architecture
      
      3. **Scalability Patterns:**
         - Design for easy asset replacement or removal
         - Plan for multiple similar assets (A/B testing, platform variants)
         - Consider runtime asset loading and unloading
      
      Generate integration architecture that follows Unity best practices and project architecture decisions.
    elicit: true
    sections:
      - id: wrapper-architecture
        title: Wrapper & Adapter Architecture
        template: |
          **[[LLM: Unity Component Integration]]**
          **Component Integration Strategy:**
          - **MonoBehaviour Wrappers:** {{monobehaviour_wrapper_approach}}
          - **ScriptableObject Configuration:** {{scriptableobject_config}}
          - **Unity Event Integration:** {{unity_event_approach}}

          **Namespace Organization:**
          ```csharp
          {{namespace_structure}}
          ```

          **Folder Structure:**
          ```
          Assets/_Project/
          ├── Scripts/ThirdParty/
          │   ├── {{asset_name}}/
          │   │   ├── Wrappers/
          │   │   ├── Adapters/
          │   │   └── Configuration/
          └── Data/AssetConfigurations/
              └── {{asset_name}}/
          ```

          **Interface Abstraction:**
          ```csharp
          {{interface_definitions}}
          ```

      - id: performance-integration
        title: Performance-Aware Integration
        template: |
          **[[LLM: Performance Optimization Intelligence]]**
          **Memory Management:**
          - {{memory_strategy_1}}
          - {{memory_strategy_2}}

          **Runtime Optimization:**
          - {{runtime_optimization_1}}
          - {{runtime_optimization_2}}

          **Mobile-Specific Optimizations:**
          - {{mobile_optimization_1}}
          - {{mobile_optimization_2}}

          **Profiling Integration:**
          - **Baseline Measurements:** {{baseline_approach}}
          - **Automated Profiling:** {{automated_profiling}}
          - **Performance Budgets:** {{performance_budgets}}

  - id: license-compliance
    title: Automated License Compliance
    instruction: |
      [[LLM: License Compliance Intelligence]]
      Implement automated license compliance management:
      
      1. **License Classification System:**
         - Per-seat vs per-project licensing implications
         - Commercial vs non-commercial usage terms
         - Distribution restrictions and source code requirements
         - Attribution and credit requirements
      
      2. **Compliance Automation:**
         - Automated license tracking in project metadata
         - Build pipeline license validation
         - Automatic attribution generation for credits
         - License renewal reminder system
      
      3. **Risk Management:**
         - License compatibility matrix with project licensing
         - Distribution compliance validation
         - Team member access control and tracking
      
      Generate automated compliance framework with enforcement mechanisms.
    elicit: true
    sections:
      - id: license-inventory
        title: Automated License Inventory
        type: table
        columns: [Asset, License Type, Usage Rights, Distribution Terms, Attribution Required, Renewal Date, Compliance Status]
        instruction: |
          [[LLM: License Analysis Intelligence]]
          For each asset license, analyze and classify:
          - **Usage Rights:** Development, testing, commercial distribution
          - **Team Access:** Per-seat limits, concurrent user restrictions
          - **Distribution:** Binary-only, source code restrictions, platform limitations
          - **Attribution:** Required credits, logo placement, legal notices
          
          Implement automated compliance checking in build pipeline.
        examples:
          - "| Dialogue System Pro | Per-Seat Commercial | 5 seats, unlimited builds | Binary distribution only | Credits screen required | 2025-06-15 | ✅ Compliant |"
          - "| Mobile Optimization Pack | Project License | Unlimited team use | No source redistribution | Documentation attribution | N/A | ✅ Compliant |"

      - id: compliance-automation
        title: Compliance Automation Framework
        template: |
          **[[LLM: Automated Compliance Generation]]**
          **Build Pipeline Integration:**
          ```yaml
          # Unity Build Pipeline License Check
          pre-build-checks:
            - license-validation
            - seat-count-verification
            - attribution-generation
          ```

          **Automated Attribution:**
          - **Credits Generation:** {{credits_automation}}
          - **Legal Notice Integration:** {{legal_notice_automation}}
          - **Documentation Updates:** {{documentation_automation}}

          **Compliance Monitoring:**
          - **License Expiration Alerts:** {{expiration_monitoring}}
          - **Usage Tracking:** {{usage_tracking}}
          - **Audit Trail:** {{audit_trail}}

  - id: performance-profiling
    title: Asset Performance Profiling Framework
    instruction: |
      [[LLM: Performance Profiling Intelligence]]
      Establish comprehensive performance profiling for asset integration:
      
      1. **Baseline Establishment:**
         - Profile project performance before asset integration
         - Document memory usage, frame rate, and build size baselines
         - Establish platform-specific performance targets
      
      2. **Asset Impact Measurement:**
         - Automated profiling pipeline for asset integration
         - Memory allocation tracking and leak detection
         - Runtime performance impact measurement
         - Build size and loading time analysis
      
      3. **Performance Budget Management:**
         - Establish per-asset performance budgets
         - Automated budget enforcement in CI/CD pipeline
         - Performance regression detection and alerts
      
      Generate automated profiling framework with intelligent optimization recommendations.
    elicit: true
    sections:
      - id: profiling-framework
        title: Automated Profiling Framework
        template: |
          **[[LLM: Performance Measurement Intelligence]]**
          **Baseline Metrics:**
          ```yaml
          performance_baseline:
            frame_rate:
              target: "{{target_fps}}"
              minimum: "{{minimum_fps}}"
            memory:
              heap_size: "{{baseline_heap}}MB"
              texture_memory: "{{baseline_textures}}MB"
            build_size:
              total: "{{baseline_build_size}}MB"
              code: "{{baseline_code_size}}MB"
          ```

          **Asset Performance Budgets:**
          | Asset Category | FPS Impact | Memory Budget | Size Budget | Priority |
          |---------------|------------|---------------|-------------|----------|
          | {{asset_category_1}} | {{fps_budget_1}} | {{memory_budget_1}} | {{size_budget_1}} | {{priority_1}} |
          | {{asset_category_2}} | {{fps_budget_2}} | {{memory_budget_2}} | {{size_budget_2}} | {{priority_2}} |

          **Automated Profiling Pipeline:**
          - **Pre-Integration Baseline:** {{baseline_automation}}
          - **Post-Integration Measurement:** {{measurement_automation}}
          - **Performance Regression Detection:** {{regression_detection}}
          - **Optimization Recommendations:** {{optimization_automation}}

      - id: mobile-optimization
        title: Mobile Performance Optimization
        template: |
          **[[LLM: Mobile Performance Intelligence]]**
          **Mobile-Specific Metrics:**
          - **Battery Impact Assessment:** {{battery_assessment}}
          - **Thermal Management:** {{thermal_management}}
          - **Memory Pressure Handling:** {{memory_pressure}}
          - **Platform-Specific Optimizations:** {{platform_optimizations}}

          **Optimization Strategies:**
          - {{mobile_strategy_1}}
          - {{mobile_strategy_2}}
          - {{mobile_strategy_3}}

  - id: security-assessment
    title: Third-Party Asset Security Framework
    instruction: |
      [[LLM: Security Assessment Intelligence]]
      Implement comprehensive security assessment for third-party assets:
      
      1. **Code Security Analysis:**
         - Source code availability and review procedures
         - Known vulnerability scanning and tracking
         - Dependency chain security assessment
         - Network access and permission analysis
      
      2. **Data Privacy Compliance:**
         - User data collection and handling practices
         - GDPR, CCPA, and regional privacy law compliance
         - Data transmission and storage security
         - Third-party service integration security
      
      3. **Supply Chain Security:**
         - Vendor security practices and certification
         - Asset distribution integrity verification
         - Update mechanism security validation
         - Incident response and vulnerability disclosure
      
      Generate automated security assessment framework with risk scoring.
    elicit: true
    sections:
      - id: security-matrix
        title: Security Assessment Matrix
        type: table
        columns: [Asset, Source Access, Network Access, Data Collection, Privacy Compliance, Vulnerability History, Security Score]
        instruction: |
          [[LLM: Security Scoring Intelligence]]
          Rate security on 1-10 scale considering:
          - Source code transparency (2 points)
          - Network access scope (2 points)
          - Data handling practices (2 points)
          - Privacy law compliance (2 points)
          - Vulnerability response history (2 points)
          
          Assets scoring below 6 require additional security measures.
        examples:
          - "| Unity Analytics | No source access | Analytics only | Anonymous gameplay data | GDPR compliant | No known issues | 7/10 |"
          - "| Custom Networking | Full source | Full network access | User account data | Requires review | Recent patches | 5/10 |"

      - id: security-mitigation
        title: Security Mitigation Strategies
        template: |
          **[[LLM: Security Mitigation Intelligence]]**
          **Code Review Process:**
          - {{code_review_process}}
          - {{security_audit_schedule}}

          **Network Security:**
          - {{network_restriction_strategy}}
          - {{data_encryption_requirements}}

          **Privacy Protection:**
          - {{privacy_safeguards}}
          - {{user_consent_management}}

          **Incident Response:**
          - {{vulnerability_response_plan}}
          - {{security_update_protocol}}

  - id: update-risk-assessment
    title: Asset Update Risk Management
    instruction: |
      [[LLM: Update Risk Intelligence]]
      Develop intelligent update risk assessment and management:
      
      1. **Risk Classification System:**
         - Breaking change probability assessment
         - API stability history analysis
         - Vendor release quality tracking
         - Project impact severity scoring
      
      2. **Automated Update Pipeline:**
         - Staging environment testing automation
         - Regression test execution
         - Performance impact validation
         - Rollback mechanism verification
      
      3. **Update Strategy Optimization:**
         - Update timing optimization for project milestones
         - Batch update risk assessment
         - Emergency update procedures
         - Long-term maintenance planning
      
      Generate adaptive update management framework.
    elicit: true
    sections:
      - id: update-risk-matrix
        title: Update Risk Assessment Matrix
        type: table
        columns: [Asset, Update Frequency, Breaking Change Risk, Test Coverage, Rollback Complexity, Update Strategy]
        instruction: |
          [[LLM: Update Strategy Intelligence]]
          Classify update strategies:
          - **Conservative:** Manual updates, extensive testing, stable releases only
          - **Balanced:** Automated minor updates, manual major updates, good test coverage
          - **Aggressive:** Automated updates, rapid deployment, comprehensive rollback
          
          Base strategy on project phase, asset criticality, and risk tolerance.
        examples:
          - "| Core Gameplay Asset | Monthly | High | 90% coverage | Complex | Conservative - Manual updates only |"
          - "| Development Tool | Weekly | Low | 60% coverage | Simple | Balanced - Auto minor, manual major |"

      - id: automated-testing
        title: Automated Update Testing
        template: |
          **[[LLM: Test Automation Intelligence]]**
          **Test Automation Framework:**
          ```yaml
          asset_update_testing:
            pre_update:
              - baseline_performance_capture
              - integration_test_execution
              - compatibility_verification
            post_update:
              - regression_test_suite
              - performance_comparison
              - functionality_validation
            rollback_triggers:
              - {{rollback_condition_1}}
              - {{rollback_condition_2}}
          ```

          **Quality Gates:**
          - {{quality_gate_1}}
          - {{quality_gate_2}}
          - {{quality_gate_3}}

  - id: fallback-strategies
    title: Intelligent Fallback & Contingency Planning
    instruction: |
      [[LLM: Fallback Strategy Intelligence]]
      Design comprehensive fallback strategies with intelligent risk mitigation:
      
      1. **Critical Path Analysis:**
         - Identify single points of failure in asset dependencies
         - Assess business impact of asset unavailability
         - Plan graceful degradation strategies
         - Consider competitive implications of asset loss
      
      2. **Alternative Solution Matrix:**
         - Multiple vendor options for critical functionality
         - Open-source alternatives evaluation
         - In-house development fallback planning
         - Hybrid solution approaches
      
      3. **Transition Planning:**
         - Automated failover mechanisms
         - Data migration procedures
         - User experience continuity planning
         - Timeline and resource estimation
      
      Generate intelligent contingency plans with automated decision trees.
    elicit: true
    sections:
      - id: contingency-matrix
        title: Intelligent Contingency Matrix
        type: table
        columns: [Asset, Criticality, Primary Fallback, Secondary Fallback, Transition Time, Automation Level]
        instruction: |
          [[LLM: Contingency Planning Intelligence]]
          Rate criticality (1-5) and plan fallbacks:
          - **Level 5 (Critical):** Project-blocking, immediate alternatives required
          - **Level 4 (High):** Major feature impact, planned alternatives required
          - **Level 3 (Medium):** Feature degradation acceptable, alternatives preferred
          - **Level 2 (Low):** Minor impact, alternatives optional
          - **Level 1 (Minimal):** Cosmetic impact, removal acceptable
          
          Automate fallback decisions where possible.
        examples:
          - "| Authentication System | 5 | Unity Gaming Services | Custom OAuth | 2 weeks | Semi-automated |"
          - "| Particle Effects | 3 | Unity VFX Graph | Simplified effects | 3 days | Fully automated |"

      - id: automated-fallback
        title: Automated Fallback Framework
        template: |
          **[[LLM: Fallback Automation Intelligence]]**
          **Automated Decision Trees:**
          ```yaml
          fallback_automation:
            triggers:
              - asset_unavailable
              - license_expired
              - critical_bug_detected
              - performance_threshold_exceeded
            responses:
              level_5_critical:
                action: "immediate_fallback"
                notification: "emergency_alert"
                automation: "{{level_5_automation}}"
              level_3_medium:
                action: "staged_transition"
                notification: "planned_alert"
                automation: "{{level_3_automation}}"
          ```

          **Graceful Degradation:**
          - {{degradation_strategy_1}}
          - {{degradation_strategy_2}}

  - id: asset-lifecycle
    title: Asset Lifecycle Management
    instruction: |
      [[LLM: Lifecycle Management Intelligence]]
      Implement comprehensive asset lifecycle management with predictive analytics:
      
      1. **Lifecycle Stage Tracking:**
         - Asset maturity assessment and tracking
         - Vendor health monitoring and analysis
         - Community support trend analysis
         - Technology obsolescence prediction
      
      2. **Proactive Management:**
         - End-of-life prediction and planning
         - Migration timeline optimization
         - Budget planning for asset evolution
         - Strategic replacement planning
      
      3. **Knowledge Management:**
         - Asset expertise documentation and transfer
         - Integration knowledge preservation
         - Tribal knowledge capture and documentation
         - Onboarding procedures for new team members
      
      Generate predictive lifecycle management framework.
    elicit: true
    sections:
      - id: lifecycle-tracking
        title: Predictive Lifecycle Tracking
        template: |
          **[[LLM: Lifecycle Prediction Intelligence]]**
          **Asset Health Metrics:**
          ```yaml
          asset_health_monitoring:
            vendor_indicators:
              - release_frequency: "{{release_frequency}}"
              - community_activity: "{{community_activity}}"
              - support_responsiveness: "{{support_responsiveness}}"
            technology_indicators:
              - unity_version_compatibility: "{{unity_compatibility}}"
              - industry_adoption: "{{industry_adoption}}"
              - competitive_alternatives: "{{competitive_alternatives}}"
          ```

          **Predictive Analytics:**
          - **End-of-Life Prediction:** {{eol_prediction}}
          - **Migration Timeline:** {{migration_timeline}}
          - **Budget Planning:** {{budget_planning}}

      - id: knowledge-management
        title: Knowledge Management Framework
        template: |
          **[[LLM: Knowledge Preservation Intelligence]]**
          **Documentation Strategy:**
          - {{documentation_strategy_1}}
          - {{documentation_strategy_2}}

          **Knowledge Transfer:**
          - {{transfer_strategy_1}}
          - {{transfer_strategy_2}}

          **Onboarding Procedures:**
          - {{onboarding_procedure_1}}
          - {{onboarding_procedure_2}}

  - id: conclusion
    title: Integration Summary & Next Steps
    content: |
      This enhanced Unity Asset Store Integration document provides a comprehensive, intelligent framework for managing third-party asset dependencies in {{project_name}}. The embedded intelligence systems adapt to project characteristics, automate compliance and security assessment, and provide predictive management capabilities.

      **Key Intelligence Features:**
      - Adaptive asset recommendations based on project type and constraints
      - Automated compatibility, security, and performance assessment
      - Intelligent fallback strategies with automated decision trees
      - Predictive lifecycle management and risk mitigation
      - Comprehensive compliance automation and enforcement

      **Continuous Improvement:**
      This framework should be regularly updated based on asset performance data, security intelligence feeds, and project evolution. The embedded LLM intelligence will adapt recommendations as project requirements and constraints change.

      **Integration with Development Workflow:**
      These strategies integrate with the Unity development pipeline established in the Architecture Foundation document and should be referenced during all asset evaluation and integration decisions.