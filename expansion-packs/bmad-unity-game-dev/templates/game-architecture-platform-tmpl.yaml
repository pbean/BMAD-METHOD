template:
  id: game-architecture-platform-template-v2
  name: Game Architecture Platform Document
  version: 2.0
  output:
    format: markdown
    filename: docs/game-architecture-platform.md
    title: "{{project_name}} Platform Architecture"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: introduction
    title: Platform Architecture Overview
    content: |
      This document defines the platform-specific architecture and optimizations for {{project_name}}. This is Part 3 of the multi-phase architecture design, focusing on target platform configurations, performance optimization, and cross-platform compatibility.

      This document builds upon both the Foundation Architecture and Systems Architecture documents. All previous architectural decisions are considered definitive and should inform the platform-specific implementations defined here.

  - id: platform-detection
    title: Target Platform Analysis and Configuration
    instruction: |
      Analyze the target platforms for this project and configure platform-specific settings. This section provides intelligent platform detection and automated configuration recommendations.

      [[LLM: Based on the project requirements and target platforms mentioned in previous documents, automatically identify the primary target platforms (Mobile iOS/Android, Desktop Windows/Mac/Linux, Console PlayStation/Xbox/Switch, VR/AR Headsets). For each detected platform, analyze hardware capabilities, performance constraints, and platform-specific requirements. Generate detailed configuration recommendations including Unity player settings, platform-specific optimizations, and development considerations. If XR platforms are detected, flag the need for Unity XR Foundation setup in subsequent sections.]]

      Focus on creating platform-aware configurations that leverage each platform's strengths while maintaining performance targets.
    elicit: true
    sections:
      - id: target-platform-matrix
        title: Target Platform Configuration Matrix
        type: table
        columns: [Platform, Hardware Profile, Performance Target, Key Constraints, Special Requirements]
        instruction: |
          Create a comprehensive platform matrix with intelligent configuration recommendations.
          
          [[LLM: For each detected target platform, automatically populate this table with platform-specific hardware profiles (e.g., "Mid-range mobile devices, 4GB RAM, Adreno 640 GPU" for Android), realistic performance targets based on platform capabilities, key constraints (battery life, thermal throttling, input methods), and special requirements (app store certification, platform SDKs, specific APIs). Use industry standards and Unity documentation to ensure accurate recommendations.]]
        examples:
          - "| iOS Mobile | iPhone 12+ equivalent, 6GB RAM, A14+ chip | 60 FPS, 2GB memory budget | Battery optimization, touch input only | App Store guidelines, iOS 14+ APIs |"
          - "| Windows PC | GTX 1060 equivalent, 8GB RAM, Intel i5+ | 60+ FPS, 4GB memory budget | Variable hardware specs | Steam integration, Windows 10+ APIs |"
      - id: unity-player-settings
        title: Unity Player Settings Configuration
        template: |
          **Platform-Specific Player Settings:**
          
          [[LLM: Generate Unity player settings configurations for each target platform. Include specific settings for Graphics APIs (Metal for iOS, Vulkan for Android, DirectX for Windows), scripting backends (IL2CPP for mobile, Mono for development), target architectures, and platform-specific optimizations. Reference Unity documentation for current best practices and include version-specific recommendations.]]

          {{platform_settings_config}}

          **Cross-Platform Considerations:**
          - {{cross_platform_setting_1}}: {{setting_rationale_1}}
          - {{cross_platform_setting_2}}: {{setting_rationale_2}}

  - id: unity-xr-foundation
    title: Unity XR Foundation Configuration
    instruction: |
      Configure Unity XR Foundation for VR/AR development support. This section provides intelligent XR setup based on detected target platforms and 3D development requirements.

      [[LLM: Based on the platform detection analysis, determine if XR development is required for this project. If VR/AR platforms are detected (Oculus, HTC Vive, ARKit, ARCore, Magic Leap, etc.) or if the project involves 3D spatial gameplay, automatically generate XR Foundation setup recommendations. Include XR package dependencies, provider configurations, interaction systems setup, and platform-specific XR optimizations. If no XR platforms are detected, provide guidance on preparing the project for future XR expansion.]]

      Focus on scalable XR architecture that supports multiple XR platforms and input methods.
    elicit: true
    sections:
      - id: xr-platform-support
        title: XR Platform Support Configuration
        template: |
          **XR Foundation Setup:**
          
          [[LLM: Generate specific XR Foundation package configurations based on detected XR platforms. Include XR Plugin Management setup, provider configurations (Oculus XR, OpenXR, ARFoundation, etc.), and XR interaction systems. Provide package version recommendations and compatibility matrices for Unity versions.]]

          **Required XR Packages:**
          - {{xr_package_1}}: {{package_version_1}} - {{package_purpose_1}}
          - {{xr_package_2}}: {{package_version_2}} - {{package_purpose_2}}

          **XR Provider Configuration:**
          - {{xr_provider_1}}: {{provider_config_1}}
          - {{xr_provider_2}}: {{provider_config_2}}

          **Input System Integration:**
          - {{xr_input_config_1}}
          - {{xr_input_config_2}}
      - id: xr-interaction-design
        title: XR Interaction and Locomotion Systems
        template: |
          **XR Interaction Framework:**
          - {{interaction_system_1}}: {{system_description_1}}
          - {{interaction_system_2}}: {{system_description_2}}

          **Locomotion Systems:**
          - {{locomotion_method_1}}: {{method_details_1}}
          - {{locomotion_method_2}}: {{method_details_2}}

          **Comfort and Accessibility:**
          - {{comfort_feature_1}}: {{feature_rationale_1}}
          - {{comfort_feature_2}}: {{feature_rationale_2}}

  - id: ui-architecture
    title: UI Architecture
    instruction: |
      Design the user interface architecture using Unity's UI system:

      1. Choose UI framework (Unity UI/uGUI, UI Toolkit, or hybrid approach)
      2. Plan UI layout and responsive design for target platforms
      3. Design UI navigation and state management
      4. Plan UI data binding and updates
      5. Consider accessibility and localization requirements

      Focus on scalable UI patterns that work across all target platforms.
    elicit: true
    sections:
      - id: ui-framework
        title: UI Framework Selection
        template: |
          **Primary UI Framework:** {{ui_framework_choice}}
          
          **Rationale:** {{framework_rationale}}

          **Framework Usage:**
          - {{usage_case_1}}: Use {{framework_1}} for {{purpose_1}}
          - {{usage_case_2}}: Use {{framework_2}} for {{purpose_2}}

          **Cross-Platform Considerations:**
          - {{platform_consideration_1}}
          - {{platform_consideration_2}}
      - id: ui-components
        title: UI Component Architecture
        template: |
          **Base UI Components:**
          - {{base_component_1}}: {{component_description_1}}
          - {{base_component_2}}: {{component_description_2}}

          **Composite UI Systems:**
          - {{composite_system_1}}: {{system_description_1}}
          - {{composite_system_2}}: {{system_description_2}}

          **UI Data Flow:**
          - {{data_flow_pattern_1}}
          - {{data_flow_pattern_2}}
      - id: ui-state-management
        title: UI State Management
        template: |
          **UI State Patterns:**
          - {{state_pattern_1}}: {{pattern_application_1}}
          - {{state_pattern_2}}: {{pattern_application_2}}

          **Screen Management:**
          - {{screen_management_1}}
          - {{screen_management_2}}

          **Modal and Popup Handling:**
          - {{modal_pattern_1}}
          - {{modal_pattern_2}}

  - id: rendering-pipeline
    title: Rendering Pipeline Configuration
    instruction: |
      Configure Unity's rendering pipeline for target platforms and performance requirements:

      1. Optimize render pipeline settings for target platforms
      2. Configure quality settings and LOD systems
      3. Plan shader and material optimization strategies
      4. Design lighting and post-processing setups
      5. Consider platform-specific rendering limitations

      Balance visual quality with performance across all target platforms.
    elicit: true
    sections:
      - id: render-pipeline-config
        title: Platform-Aware Render Pipeline Configuration
        template: |
          **Intelligent Pipeline Configuration:**
          
          [[LLM: Based on the target platform analysis, automatically recommend the optimal render pipeline for each platform. For mobile platforms, typically recommend Universal Render Pipeline (URP) with mobile-optimized settings. For high-end PC/Console, consider High Definition Render Pipeline (HDRP) for visual fidelity or URP for performance. For XR platforms, URP is generally recommended. Generate specific pipeline configurations including renderer features, lighting settings, shadow configurations, and post-processing setups optimized for each platform's capabilities.]]

          **Pipeline Selection:**
          - **Primary Render Pipeline:** {{intelligent_pipeline_choice}}
          - **Platform Rationale:** {{platform_pipeline_rationale}}
          
          **Platform-Optimized Settings:**
          {{platform_optimized_pipeline_settings}}

          **Quality Tier Configurations:**
          - {{quality_tier_1}}: {{tier_settings_1}}
          - {{quality_tier_2}}: {{tier_settings_2}}
          - {{quality_tier_3}}: {{tier_settings_3}}

          **Performance vs Quality Trade-offs:**
          - {{tradeoff_1}}: {{optimization_strategy_1}}
          - {{tradeoff_2}}: {{optimization_strategy_2}}
      - id: shader-guidelines
        title: Shader and Material Guidelines
        template: |
          **Shader Standards:**
          - {{shader_standard_1}}
          - {{shader_standard_2}}

          **Material Organization:**
          - {{material_org_1}}
          - {{material_org_2}}

          **Platform Variants:**
          - {{variant_1}}: {{variant_purpose_1}}
          - {{variant_2}}: {{variant_purpose_2}}
      - id: sprite-management
        title: Sprite and Texture Management
        template: |
          **Texture Import Settings:**
          - {{texture_setting_1}}: {{setting_purpose_1}}
          - {{texture_setting_2}}: {{setting_purpose_2}}

          **Atlas Configuration:**
          - {{atlas_1}}: {{atlas_contents_1}}
          - {{atlas_2}}: {{atlas_contents_2}}

          **Platform Overrides:**
          - {{override_1}}: {{override_rationale_1}}
          - {{override_2}}: {{override_rationale_2}}

  - id: particle-systems
    title: Particle Systems and VFX
    instruction: |
      Design particle effects and visual effects systems for target platforms:

      1. Choose VFX framework (Unity Particle System, VFX Graph, or hybrid)
      2. Plan particle effect performance budgets
      3. Design scalable VFX for different quality settings
      4. Consider mobile-specific VFX optimizations
      5. Plan VFX asset organization and reusability

      Focus on visually appealing effects that maintain performance across platforms.
    elicit: true
    sections:
      - id: vfx-framework
        title: VFX Framework Selection
        template: |
          **Primary VFX Tools:**
          - {{vfx_tool_1}}: {{tool_usage_1}}
          - {{vfx_tool_2}}: {{tool_usage_2}}

          **Performance Budgets:**
          - {{platform_1}}: {{particle_budget_1}}
          - {{platform_2}}: {{particle_budget_2}}

          **Quality Scaling:**
          - {{quality_level_1}}: {{scaling_approach_1}}
          - {{quality_level_2}}: {{scaling_approach_2}}

  - id: audio-architecture
    title: Audio Architecture
    instruction: |
      Design the audio system architecture for target platforms:

      1. Configure Unity Audio system for target platforms
      2. Plan audio asset organization and compression
      3. Design audio mixing and dynamic range management
      4. Consider platform-specific audio limitations
      5. Plan for localization and accessibility audio features

      Optimize audio for platform capabilities while maintaining quality.
    elicit: true
    sections:
      - id: audio-mixing
        title: Audio Mixing Strategy
        template: |
          **Mixer Groups:**
          - {{mixer_group_1}}: {{group_purpose_1}}
          - {{mixer_group_2}}: {{group_purpose_2}}

          **Platform Audio Settings:**
          - {{platform_1}}: {{audio_settings_1}}
          - {{platform_2}}: {{audio_settings_2}}

          **Dynamic Range Management:**
          - {{range_strategy_1}}
          - {{range_strategy_2}}
      - id: sound-banks
        title: Audio Asset Management
        template: |
          **Sound Bank Organization:**
          - {{sound_bank_1}}: {{bank_contents_1}}
          - {{sound_bank_2}}: {{bank_contents_2}}

          **Compression Settings:**
          - {{compression_1}}: {{compression_rationale_1}}
          - {{compression_2}}: {{compression_rationale_2}}

          **Loading Strategy:**
          - {{loading_pattern_1}}
          - {{loading_pattern_2}}

  - id: performance-optimization
    title: Performance Optimization Strategy
    instruction: |
      Define performance optimization approaches for each target platform:

      1. Identify performance bottlenecks for target platforms
      2. Plan profiling and measurement strategies
      3. Define optimization techniques for CPU, GPU, and memory
      4. Create performance budgets and monitoring systems
      5. Plan for performance regression testing

      Focus on measurable, platform-specific optimizations that maintain gameplay quality.
    elicit: true
    sections:
      - id: performance-targets
        title: Platform-Specific Performance Optimization
        template: |
          **Intelligent Performance Strategy:**
          
          [[LLM: Generate platform-specific performance optimization strategies based on the target platform analysis. For mobile platforms, focus on battery optimization, thermal management, and memory efficiency. For PC platforms, leverage variable hardware specs with scalable quality settings. For console platforms, optimize for fixed hardware specs with platform-specific features. Include specific Unity profiler guidance, optimization techniques (object pooling, LOD systems, occlusion culling), and performance monitoring strategies.]]

          **Platform Performance Targets:**
          {{intelligent_performance_matrix}}

          **Mobile-Specific Optimizations:**
          - {{mobile_optimization_1}}: {{mobile_strategy_1}}
          - {{mobile_optimization_2}}: {{mobile_strategy_2}}

          **Desktop-Specific Optimizations:**
          - {{desktop_optimization_1}}: {{desktop_strategy_1}}
          - {{desktop_optimization_2}}: {{desktop_strategy_2}}

          **Console-Specific Optimizations:**
          - {{console_optimization_1}}: {{console_strategy_1}}
          - {{console_optimization_2}}: {{console_strategy_2}}

          **XR-Specific Optimizations:**
          - {{xr_optimization_1}}: {{xr_strategy_1}}
          - {{xr_optimization_2}}: {{xr_strategy_2}}

  - id: platform-integrations
    title: Platform Services Integration
    instruction: |
      Design integrations with platform-specific services and APIs:

      1. Identify required platform services (achievements, leaderboards, cloud saves)
      2. Plan authentication and user account management
      3. Design analytics and telemetry integration
      4. Consider platform store requirements and certification
      5. Plan for platform-specific features (haptics, notifications)

      Create abstraction layers that work consistently across platforms.
    elicit: true
    sections:
      - id: external-integrations
        title: External Service Integrations
        template: |
          **Platform Services:**
          - {{service_1}}: {{service_purpose_1}}
          - {{service_2}}: {{service_purpose_2}}

          **Third-Party Services:**
          - {{third_party_1}}: {{integration_approach_1}}
          - {{third_party_2}}: {{integration_approach_2}}

          **API Abstraction:**
          - {{abstraction_layer_1}}
          - {{abstraction_layer_2}}
      - id: analytics-integration
        title: Analytics and Telemetry
        template: |
          **Analytics Framework:** {{analytics_framework}}

          **Key Metrics:**
          - {{metric_1}}: {{metric_purpose_1}}
          - {{metric_2}}: {{metric_purpose_2}}

          **Data Collection:**
          - {{collection_method_1}}
          - {{collection_method_2}}

          **Privacy Compliance:**
          - {{privacy_measure_1}}
          - {{privacy_measure_2}}

  - id: cross-platform-input
    title: Adaptive Input System Configuration
    instruction: |
      Configure Unity's Input System for seamless cross-platform input handling. This section provides intelligent input adaptation based on target platform capabilities.

      [[LLM: Based on the target platform analysis, automatically configure Unity's Input System for optimal input handling across all detected platforms. For mobile platforms, configure touch input, accelerometer, and gyroscope. For desktop platforms, configure keyboard, mouse, and gamepad support. For console platforms, configure platform-specific controllers. For XR platforms, configure hand tracking, eye tracking, and spatial controllers. Generate input action maps, control schemes, and platform-specific input adaptations that provide consistent gameplay experience across all platforms.]]

      Focus on creating unified input experiences that adapt intelligently to each platform's input capabilities.
    elicit: true
    sections:
      - id: input-system-architecture
        title: Input System Architecture
        template: |
          **Adaptive Input Configuration:**
          
          [[LLM: Generate Unity Input System configurations with platform-adaptive input handling. Create input action maps that automatically adapt to available input methods on each platform. Include control scheme switching, input device detection, and fallback input methods. Provide configuration for touch gestures on mobile, precision mouse control on PC, controller haptics on console, and spatial input for XR platforms.]]

          **Input Action Maps:**
          - {{input_map_1}}: {{map_description_1}}
          - {{input_map_2}}: {{map_description_2}}

          **Platform Control Schemes:**
          - {{control_scheme_1}}: {{scheme_devices_1}}
          - {{control_scheme_2}}: {{scheme_devices_2}}

          **Input Adaptation Logic:**
          - {{adaptation_rule_1}}: {{rule_implementation_1}}
          - {{adaptation_rule_2}}: {{rule_implementation_2}}
      - id: input-ui-integration
        title: Input-UI Integration
        template: |
          **UI Input Integration:**
          - {{ui_input_1}}: {{integration_approach_1}}
          - {{ui_input_2}}: {{integration_approach_2}}

          **Accessibility Features:**
          - {{accessibility_input_1}}: {{feature_details_1}}
          - {{accessibility_input_2}}: {{feature_details_2}}

          **Input Feedback Systems:**
          - {{feedback_system_1}}: {{feedback_config_1}}
          - {{feedback_system_2}}: {{feedback_config_2}}

  - id: cross-platform-compatibility
    title: Cross-Platform Compatibility
    instruction: |
      Plan for consistent experience across all target platforms:

      1. Define shared vs platform-specific features
      2. Plan input method adaptations for different platforms
      3. Design responsive UI layouts for different screen sizes
      4. Address platform-specific technical limitations
      5. Plan testing and validation across platforms

      Ensure core gameplay remains consistent while leveraging platform strengths.
    elicit: true
    sections:
      - id: platform-differences
        title: Platform-Specific Considerations
        template: |
          **Input Differences:**
          - {{input_difference_1}}: {{adaptation_strategy_1}}
          - {{input_difference_2}}: {{adaptation_strategy_2}}

          **Display Differences:**
          - {{display_difference_1}}: {{ui_adaptation_1}}
          - {{display_difference_2}}: {{ui_adaptation_2}}

          **Feature Availability:**
          - {{feature_1}}: {{platform_availability_1}}
          - {{feature_2}}: {{platform_availability_2}}
      - id: testing-strategy
        title: Cross-Platform Testing Strategy
        template: |
          **Testing Scope:**
          - {{testing_scope_1}}
          - {{testing_scope_2}}

          **Platform-Specific Tests:**
          - {{platform_test_1}}: {{test_approach_1}}
          - {{platform_test_2}}: {{test_approach_2}}

          **Compatibility Matrix:**
          - {{compatibility_check_1}}
          - {{compatibility_check_2}}

  - id: deployment-strategy
    title: Platform Deployment Strategy
    instruction: |
      Plan the build and deployment process for each target platform:

      1. Configure platform-specific build settings
      2. Plan app store submission and certification processes
      3. Design update and patch deployment strategies
      4. Consider platform-specific distribution requirements
      5. Plan for platform-specific testing and quality assurance

      Streamline deployment while meeting each platform's specific requirements.
    elicit: true
    sections:
      - id: build-configurations
        title: Automated Platform Build Pipeline
        template: |
          **Intelligent Build Automation:**
          
          [[LLM: Generate automated build pipeline configurations for each target platform detected in the platform analysis. Include Unity Cloud Build configurations, local build scripts, platform-specific build settings, app signing configurations, and deployment strategies. For mobile platforms, include app store submission requirements. For PC platforms, include distribution platform integrations (Steam, Epic, etc.). For console platforms, include certification and submission processes. Generate CI/CD pipeline recommendations using Unity Cloud Build, GitHub Actions, or similar services.]]

          **Build Pipeline Architecture:**
          {{intelligent_build_pipeline_config}}

          **Platform Build Configurations:**
          - {{platform_build_1}}: {{build_config_details_1}}
          - {{platform_build_2}}: {{build_config_details_2}}

          **Automated Testing Integration:**
          - {{automated_test_1}}: {{test_config_1}}
          - {{automated_test_2}}: {{test_config_2}}

          **Deployment and Distribution:**
          - {{deployment_strategy_1}}: {{distribution_details_1}}
          - {{deployment_strategy_2}}: {{distribution_details_2}}

          **Version Management:**
          - {{versioning_strategy}}: {{version_details}}
          - {{build_numbering}}: {{numbering_scheme}}
      - id: update-strategy
        title: Update and Patching Strategy
        template: |
          **Update Mechanisms:**
          - {{update_method_1}}: {{method_details_1}}
          - {{update_method_2}}: {{method_details_2}}

          **Versioning Strategy:**
          - {{versioning_approach}}
          - {{backward_compatibility}}

          **Rollback Procedures:**
          - {{rollback_scenario_1}}: {{rollback_procedure_1}}
          - {{rollback_scenario_2}}: {{rollback_procedure_2}}

  - id: next-steps
    title: Next Steps
    content: |
      This platform architecture document defines the platform-specific configurations and optimizations. The final phase of architecture design will address advanced features and long-term considerations:

      **Phase 4: Advanced Architecture**
      - Advanced Unity features and cutting-edge techniques
      - Scalability architecture for future growth
      - Technical debt management and code maintenance strategies
      - Production monitoring and live operations support

      The platform configurations defined in this document should be implemented and tested before proceeding to advanced architectural considerations. Each platform should be validated against the performance targets and compatibility requirements outlined here.